
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #################################
> # Amazon Employee Access Analysis
> #################################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Search for functions across packages at https://www.tidymodels.org/find/
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed) # for target encoding
> library(ranger)
> library(rpart)

Attaching package: ‘rpart’

The following object is masked from ‘package:dials’:

    prune

> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(naivebayes)
naivebayes 0.9.7 loaded
> library(kknn)
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(themis)
> library(stacks)
> 
> parallel::detectCores()
[1] 56
> cl <- makePSOCKcluster(4)
> registerDoParallel(cl)
> 
> train <- vroom("./train.csv") %>% 
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> test <- vroom("./test.csv") %>% 
+   select(-1)
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # balance_recipe <- recipe(ACTION ~ ., data = train) %>% 
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% 
> #   step_other(all_nominal_predictors(), threshold = 0.05) %>% 
> #   step_dummy(all_nominal_predictors()) %>% 
> #   step_smote(all_outcomes(), neighbors = 10)
> 
> # balance_recipe <- recipe(ACTION ~ ., data = train) %>% 
> #   step_other(all_nominal_predictors(), threshold = 0.05) %>% 
> #   step_dummy(all_nominal_predictors(), -all_outcomes()) %>% 
> #   step_smote(ACTION, neighbors = 10)
> 
> 
> # my_recipe <- recipe(ACTION ~ ., data = train) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
> #   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> 
> predict_and_format <- function(workflow, new_data, filename){
+   predictions <- workflow %>%
+     predict(new_data = new_data,
+             type = "prob")
+   
+   submission <- predictions %>%
+     mutate(Id = row_number()) %>% 
+     rename("Action" = ".pred_1") %>% 
+     select(3,2)
+   
+   vroom_write(x = submission, file = filename, delim=",")
+ }
> 
> 
> # # NOTE: some of these step functions are not appropriate to use together 13
> # # apply the recipe to your data
> # prepped_recipe <- prep(my_recipe)
> # baked <- bake(prepped_recipe, new_data = NULL)
> # 
> # baked
> 
> # Logistic Regression -----------------------------------------------------
> # library(tidymodels)
> # #
> # log_mod <- logistic_reg() %>% # Type of model
> #   set_engine('glm')
> # 
> # amazon_wf <- workflow() %>%
> #   add_recipe(balance_recipe) %>%
> #   add_model(log_mod) %>%
> #   fit(data = train) # Fit the workflow
> # 
> # amazon_predictions <- predict(amazon_wf,
> #                               new_data = test,
> #                               type = 'prob')
> # 
> # amazon_submission <- amazon_predictions %>%
> #   mutate(Id = row_number()) %>%
> #   rename("Action" = ".pred_1") %>%
> #   select(3,2)
> # 
> # vroom_write(x=amazon_submission, file="./logistic_reg_smote.csv", delim=",")
> 
> # Penalized Regression
> 
> # target_encoding_recipe <- recipe(ACTION ~ ., data = train) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
> #   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>% # dummy variable encoding
> #   step_normalize(all_nominal_predictors())
> 
> 
> # pen_log_mod <- logistic_reg(mixture = tune() , penalty = tune() ) %>%
> #   set_engine('glmnet')
> # 
> # pen_log_wf <- workflow() %>%
> #   add_recipe(my_recipe) %>%
> #   add_model(pen_log_mod)
> # 
> # ## Grid of values to tune over
> # pen_tuning_grid <- grid_regular(penalty(),
> #                             mixture(),
> #                             levels = 5)
> # 
> # ## Splits data for CV
> # folds <- vfold_cv(train, v = 5, repeats = 1)
> # 
> # ## Run the CV
> # cv_results <- pen_log_wf %>%
> #   tune_grid(resamples = folds,
> #             grid = pen_tuning_grid,
> #             metrics = metric_set(roc_auc))
> # 
> # best_tune <- cv_results %>%
> #   select_best('roc_auc')
> # 
> # # Finalize wf and fit it
> # final_wf <-
> #   pen_log_wf %>%
> #   finalize_workflow(best_tune) %>%
> #   fit(data = train)
> # 
> # # Predict
> # pen_log_preds <- final_wf %>%
> #   predict(new_data = test, type = 'prob')
> # 
> # pen_log_submission <- pen_log_preds %>%
> #   mutate(Id = row_number()) %>%
> #   rename("Action" = ".pred_1") %>%
> #   select(3,2)
> # 
> # vroom_write(x=pen_log_submission, file="./pen_log_reg_smote.csv", delim=",")
> 
> 
> # # Random Forests ----------------------------------------------------------
> # rand_forest_mod <- rand_forest(mtry = tune(),
> #                                min_n=tune(),
> #                                trees=500) %>% # or 1000
> #   set_engine("ranger") %>%
> #   set_mode("classification")
> # 
> # rand_forest_workflow <- workflow() %>%
> #   add_recipe(my_recipe) %>%
> #   add_model(rand_forest_mod)
> # 
> # rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
> #                                         min_n(),
> #                                         levels = 5) ## L^2 total tuning possibilities
> # 
> # ## Split data for CV
> # forest_folds <- vfold_cv(train, v = 5, repeats = 1)
> # 
> # ## Run the CV
> # CV_results <- rand_forest_workflow %>%
> #   tune_grid(resamples = forest_folds,
> #             grid = rand_forest_tuning_grid,
> #             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> # 
> # ## Find Best Tuning Parameters
> # forest_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # ## Finalize the Workflow & fit it
> # final_forest_wf <- rand_forest_workflow %>%
> #   finalize_workflow(forest_bestTune) %>%
> #   fit(data = train)
> # 
> # predict_and_format(final_forest_wf, test, "./random_forest_predictions_smote.csv")
> 
> # Naive Bayes -------------------------------------------------------------
> # library(discrim)
> # 
> # nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
> #   set_mode('classification') %>%
> #   set_engine('naivebayes')
> # 
> # nb_wf <- workflow() %>%
> #   add_recipe(balance_recipe) %>%
> #   add_model(nb_model)
> # 
> # # Tune smoothness and Laplace here
> # nb_tuning_grid <- grid_regular(Laplace(),
> #                                smoothness(),
> #                                levels = 5)
> # 
> # ## Split data for CV
> # nb_folds <- vfold_cv(train, v = 5, repeats = 1)
> # 
> # ## Run the CV
> # CV_results <- nb_wf %>%
> #   tune_grid(resamples = nb_folds,
> #             grid = nb_tuning_grid,
> #             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> # 
> # ## Find Best Tuning Parameters
> # nb_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # ## Finalize the Workflow & fit it
> # final_nb_wf <- nb_wf %>%
> #   finalize_workflow(nb_bestTune) %>%
> #   fit(data = train)
> # 
> # # Predict
> # predict(final_nb_wf, new_data = test, type = 'prob')
> # 
> # predict_and_format(final_nb_wf, test, "./nb_preds_smote.csv")
> #
> # # k-nearest neighbors -----------------------------------------------------
> 
> # knn_model <- nearest_neighbor(neighbors=tune()) %>% # set or tune
> #   set_mode("classification") %>%
> #   set_engine("kknn")
> # 
> # knn_wf <- workflow() %>%
> #   add_recipe(balance_recipe) %>%
> #   add_model(knn_model)
> # 
> # # cross validation
> # knn_tuning_grid <- grid_regular(neighbors(),
> #                                 levels = 5)
> # 
> # knn_folds <- vfold_cv(train, v = 5, repeats = 1)
> # 
> # ## Run the CV
> # CV_results <- knn_wf %>%
> #   tune_grid(resamples = knn_folds,
> #             grid = knn_tuning_grid,
> #             metrics = metric_set(roc_auc))
> # 
> # knn_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # # finalize workflow
> # final_knn_wf <- knn_wf %>%
> #   finalize_workflow(knn_bestTune) %>%
> #   fit(data = train)
> # 
> # predict_and_format(final_knn_wf, test, "./knn_predictions_smote.csv")
> 
> # Principal Component Dimension Reduction ---------------------------------
> # pcdr_recipe <- recipe(ACTION ~ ., train) %>%
> #   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
> #   step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
> #   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%  # target encoding (must be 2-factor)
> #   step_normalize(all_nominal_predictors()) %>%
> #   step_pca(all_predictors(), threshold = .8) #Threshold is between 0 and 1
> 
> # nb_model <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>%
> #   set_mode('classification') %>%
> #   set_engine('naivebayes')
> #
> # nb_wf <- workflow() %>%
> #   add_recipe(pcdr_recipe) %>%
> #   add_model(nb_model)
> #
> # # Tune smoothness and Laplace here
> # nb_tuning_grid <- grid_regular(Laplace(),
> #                                smoothness(),
> #                                levels = 5)
> #
> # ## Split data for CV
> # nb_folds <- vfold_cv(train, v = 5, repeats = 1)
> #
> # ## Run the CV
> # CV_results <- nb_wf %>%
> #   tune_grid(resamples = nb_folds,
> #             grid = nb_tuning_grid,
> #             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> #
> # ## Find Best Tuning Parameters
> # nb_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> #
> # ## Finalize the Workflow & fit it
> # final_nb_wf <- nb_wf %>%
> #   finalize_workflow(nb_bestTune) %>%
> #   fit(data = train)
> #
> # # Predict
> # predict(final_nb_wf, new_data = test, type = 'prob')
> #
> # predict_and_format(final_nb_wf, test, "./nb_pcdr_preds.csv")
> #
> # knn_model <- nearest_neighbor(neighbors=tune()) %>% # set or tune
> #   set_mode("classification") %>%
> #   set_engine("kknn")
> #
> # knn_wf <- workflow() %>%
> #   add_recipe(pcdr_recipe) %>%
> #   add_model(knn_model)
> #
> # # cross validation
> # knn_tuning_grid <- grid_regular(neighbors(),
> #                                 levels = 5)
> #
> # knn_folds <- vfold_cv(train, v = 5, repeats = 1)
> #
> # ## Run the CV
> # CV_results <- knn_wf %>%
> #   tune_grid(resamples = knn_folds,
> #             grid = knn_tuning_grid,
> #             metrics = metric_set(roc_auc))
> #
> # knn_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> #
> # # finalize workflow
> # final_knn_wf <- knn_wf %>%
> #   finalize_workflow(knn_bestTune) %>%
> #   fit(data = train)
> #
> # predict_and_format(final_knn_wf, test, "./knn_pcdr_predictions.csv")
> # 
> # # Random Forests w PCDR ---------------------------------------------------
> # # rand_forest_mod <- rand_forest(mtry = tune(),
> # #                                min_n=tune(),
> # #                                trees=1000) %>% # or 1000
> # #   set_engine("ranger") %>%
> # #   set_mode("classification")
> # #
> # # rand_forest_workflow <- workflow() %>%
> # #   add_recipe(pcdr_recipe) %>%
> # #   add_model(rand_forest_mod)
> # #
> # # rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
> # #                                         min_n(),
> # #                                         levels = 5) ## L^2 total tuning possibilities
> # #
> # # ## Split data for CV
> # # forest_folds <- vfold_cv(train, v = 5, repeats = 1)
> # #
> # # ## Run the CV
> # # CV_results <- rand_forest_workflow %>%
> #   tune_grid(resamples = forest_folds,
> #             grid = rand_forest_tuning_grid,
> #             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> # 
> # ## Find Best Tuning Parameters
> # forest_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # ## Finalize the Workflow & fit it
> # final_forest_wf <- rand_forest_workflow %>%
> #   finalize_workflow(forest_bestTune) %>%
> #   fit(data = train)
> # 
> # predict_and_format(final_forest_wf, test, "./random_forest_pcdr_predictions.csv")
> 
> # Support Vector Machines -------------------------------------------------
> # svmPoly <- svm_poly(degree = tune(), cost = tune()) %>% 
> #   set_mode('classification') %>% 
> #   set_engine('kernlab')
> # 
> # svmRadial <- svm_rbf(rbf_sigma = tune(), cost = tune()) %>% 
> #   set_mode('classification') %>% 
> #   set_engine('kernlab')
> # 
> # svmLinear <- svm_linear(cost = tune()) %>% 
> #   set_mode('classification') %>% 
> #   set_engine('kernlab')
> # 
> # svm_wf <- workflow() %>%
> #   add_recipe(balance_recipe) %>%
> #   add_model(svmRadial)
> # 
> # # cross validation
> # svm_tuning_grid <- grid_regular(cost(),
> #                                 rbf_sigma(),
> #                                 levels = 5)
> # 
> # svm_folds <- vfold_cv(train, v = 5, repeats = 1)
> # 
> # ## Run the CV
> # CV_results <- svm_wf %>%
> #   tune_grid(resamples = svm_folds,
> #             grid = svm_tuning_grid,
> #             metrics = metric_set(roc_auc))
> # 
> # svm_bestTune <- CV_results %>%
> #   select_best("roc_auc")
> # 
> # # finalize workflow
> # final_svm_wf <- svm_wf %>%
> #   finalize_workflow(svm_bestTune) %>%
> #   fit(data = train)
> # 
> # predict_and_format(final_svm_wf, test, "./svm_predictions_smote.csv")
> 
> # model stacking ----------------------------------------------------------
> 
> # Penalized model
> penalized_logistic_mod <- logistic_reg(mixture = tune(),
+                                        penalty = tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> penalized_reg_recipe <- recipe(ACTION ~ ., train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
> 
> penalized_logistic_workflow <- workflow() %>%
+   add_recipe(penalized_reg_recipe) %>%
+   add_model(penalized_logistic_mod)
> 
> ## Grid of values to tune over
> pen_tuning_grid <- grid_regular(penalty(),
+                                 mixture(),
+                                 levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> pen_folds <- vfold_cv(train, v = 5, repeats = 3)
> 
> ## Run the CV
> CV_results <- penalized_logistic_workflow %>%
+   tune_grid(resamples = pen_folds,
+             grid = pen_tuning_grid,
+             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> 
> ## Find Best Tuning Parameters
> pen_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_pen_wf <- penalized_logistic_workflow %>%
+   finalize_workflow(pen_bestTune) %>%
+   fit(data = train)
> 
> rand_forest_mod <- rand_forest(mtry = tune(),
+                                min_n=tune(),
+                                trees = 1000) %>% # or 1000
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> target_encoding_recipe <- recipe(ACTION ~ ., train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>%  # combines categorical values that occur <1% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # target encoding (must be 2-factor)
> 
> balance_recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>% #Everything numeric for SMOTE
+   step_downsample(all_outcomes())
> 
> rand_forest_workflow <- workflow() %>%
+   add_recipe(target_encoding_recipe) %>%
+   add_model(rand_forest_mod)
> 
> rand_forest_tuning_grid <- grid_regular(mtry(range = c(1, (ncol(train)-1))),
+                                         min_n(),
+                                         levels = 5) ## L^2 total tuning possibilities
> 
> ## Split data for CV
> forest_folds <- vfold_cv(train, v = 5, repeats = 2)
> 
> ## Run the CV
> CV_results <- rand_forest_workflow %>%
+   tune_grid(resamples = forest_folds,
+             grid = rand_forest_tuning_grid,
+             metrics = metric_set(roc_auc)) # f_meas, sens, recall, spec, precision, accuracy
> 
> ## Find Best Tuning Parameters
> forest_bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> ## Finalize the Workflow & fit it
> final_forest_wf <- rand_forest_workflow %>%
+   finalize_workflow(forest_bestTune) %>%
+   fit(data = train)
> 
> folds <- vfold_cv(train, v = 5, repeats=2)
> untunedModel <- control_stack_grid()
> 
> preg_models <- penalized_logistic_workflow %>%
+   tune_grid(resamples=folds,
+             grid=pen_tuning_grid,
+             metrics=metric_set(roc_auc),
+             control = untunedModel)
> 
> randforest_models <- rand_forest_workflow %>%
+   tune_grid(resamples=folds,
+             grid=rand_forest_tuning_grid,
+             metrics=metric_set(roc_auc),
+             control = untunedModel)
> 
> # Specify with models to include
> my_stack <- stacks() %>%
+   add_candidates(preg_models) %>%
+   add_candidates(randforest_models)
Warning messages:
1: The inputted `candidates` argument `preg_models` generated notes during
tuning/resampling. Model stacking may fail due to these issues; see
`collect_notes()` (`?tune::collect_notes()`) if so. 
2: Predictions from 28 candidates were identical to those from existing candidates
and were removed from the data stack. 
> 
> ## Fit the stacked model
> stack_mod <- my_stack %>%
+   blend_predictions() %>% # LASSO penalized regression meta-learner
+   fit_members() ## Fit the members to the dataset
