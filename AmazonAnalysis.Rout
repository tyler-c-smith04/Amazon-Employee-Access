
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #################################
> # Amazon Employee Access Analysis
> #################################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed) # for target encoding
> 
> train <- vroom("./train.csv") %>% 
+   mutate(ACTION = as.factor(ACTION))
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> test <- vroom("./test.csv") %>% 
+   select(-1)
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> my_recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% 
+   step_dummy(all_nominal_predictors()) # dummy variable encoding
> 
> 
> # NOTE: some of these step functions are not appropriate to use together 13
> # apply the recipe to your data
> prepped_recipe <- prep(my_recipe)
> baked <- bake(prepped_recipe, new_data = NULL)
> 
> baked
# A tibble: 32,769 × 1,050
   ACTION RESOURCE_X917 RESOURCE_X971 RESOURCE_X972 RESOURCE_X1020
   <fct>          <dbl>         <dbl>         <dbl>          <dbl>
 1 1                  0             0             0              0
 2 1                  0             0             0              0
 3 1                  0             0             0              0
 4 1                  0             0             0              0
 5 1                  0             0             0              0
 6 0                  0             0             0              0
 7 1                  0             0             0              0
 8 1                  0             0             0              0
 9 1                  0             0             0              0
10 1                  0             0             0              0
# ℹ 32,759 more rows
# ℹ 1,045 more variables: RESOURCE_X1937 <dbl>, RESOURCE_X1969 <dbl>,
#   RESOURCE_X3130 <dbl>, RESOURCE_X3264 <dbl>, RESOURCE_X3853 <dbl>,
#   RESOURCE_X4675 <dbl>, RESOURCE_X5112 <dbl>, RESOURCE_X5173 <dbl>,
#   RESOURCE_X6977 <dbl>, RESOURCE_X7543 <dbl>, RESOURCE_X7678 <dbl>,
#   RESOURCE_X13878 <dbl>, RESOURCE_X14354 <dbl>, RESOURCE_X14570 <dbl>,
#   RESOURCE_X15022 <dbl>, RESOURCE_X15064 <dbl>, RESOURCE_X15369 <dbl>, …
> 
> # Logistic Regression -----------------------------------------------------
> library(tidymodels)
> 
> log_mod <- logistic_reg() %>% # Type of model
+   set_engine('glm')
> 
> amazon_wf <- workflow() %>% 
+   add_recipe(my_recipe) %>% 
+   add_model(log_mod) %>% 
+   fit(data = train) # Fit the workflow
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> amazon_predictions <- predict(amazon_wf,
+                               new_data = test,
+                               type = 'prob')
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> 
> amazon_submission <- amazon_predictions %>%
+   mutate(Id = row_number()) %>% 
+   rename("Action" = ".pred_1") %>% 
+   select(3,2)
> 
> vroom_write(x=amazon_submission, file="./logistic_reg.csv", delim=",")
> 
> # Penalized Regression
> 
> target_encoding_recipe <- recipe(ACTION ~ ., data = train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% 
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # dummy variable encoding
> 
> pen_log_mod <- logistic_reg(mixture = tune() , penalty = tune() ) %>% 
+   set_engine('glmnet')
> 
> pen_log_wf <- workflow() %>% 
+   add_recipe(target_encoding_recipe) %>% 
+   add_model(pen_log_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5)
> 
> ## Splits data for CV
> folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> ## Run the CV
> cv_results <- pen_log_wf %>% 
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(roc_auc))
> 
> best_tune <- cv_results %>% 
+   select_best('roc_auc')
> 
> # Finalize wf and fit it
> final_wf <- 
+   pen_log_wf %>% 
+   finalize_workflow(best_tune) %>% 
+   fit(data = train)
> 
> # Predict
> pen_log_preds <- final_wf %>% 
+   predict(new_data = test, type = 'prob')
> 
> pen_log_submission <- pen_log_preds %>%
+   mutate(Id = row_number()) %>% 
+   rename("Action" = ".pred_1") %>% 
+   select(3,2)
> 
> vroom_write(x=pen_log_submission, file="./pen_log_reg.csv", delim=",")
> 
> proc.time()
    user   system  elapsed 
3777.264   53.902  514.832 
