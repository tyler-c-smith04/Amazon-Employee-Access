count(`neighbourhood group`)
# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
glimpse(abnb)
abnb$price<-gsub("$","",as.character(abnb$price))
abnb
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb
abnb$price <- as.numeric(abnb$price)
library(tidyverse)
library(readr)
library(stringr)
abnb <- read_csv("Development/Projects/doTERRA Assessment/Airbnb_Open_Data.csv")
abnb <- as_tibble(abnb)
abnb <- abnb %>%
select(NAME, `host id`, host_identity_verified, `neighbourhood group`,
neighbourhood, `room type`, `Construction year`, price, `service fee`)
abnb <- na.omit(abnb)
table(abnb['room type'])
table(abnb['neighbourhood group'])
abnb %>%
count(`room type`)
abnb %>%
count(`neighbourhood group`)
# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
glimpse(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb
as.numeric(abnb$price)
library(tidyverse)
library(readr)
library(stringr)
abnb <- read_csv("Development/Projects/doTERRA Assessment/Airbnb_Open_Data.csv")
abnb <- as_tibble(abnb)
abnb <- abnb %>%
select(NAME, `host id`, host_identity_verified, `neighbourhood group`,
neighbourhood, `room type`, `Construction year`, price, `service fee`)
abnb <- na.omit(abnb)
table(abnb['room type'])
table(abnb['neighbourhood group'])
abnb %>%
count(`room type`)
abnb %>%
count(`neighbourhood group`)
# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
glimpse(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb$price<-gsub(","," ",as.character(abnb$price))
abnb
View(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb$price<-gsub(","," ",as.character(abnb$price))
View(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb$price<-gsub(","," ",as.character(abnb$price))
abnb
abnb$price<-gsub("$"," ",as.character(abnb$price))
# abnb$price<-gsub(","," ",as.character(abnb$price))
abnb
library(tidyverse)
library(readr)
library(stringr)
abnb <- read_csv("Development/Projects/doTERRA Assessment/Airbnb_Open_Data.csv")
abnb <- as_tibble(abnb)
abnb <- abnb %>%
select(NAME, `host id`, host_identity_verified, `neighbourhood group`,
neighbourhood, `room type`, `Construction year`, price, `service fee`)
abnb <- na.omit(abnb)
table(abnb['room type'])
table(abnb['neighbourhood group'])
abnb %>%
count(`room type`)
abnb %>%
count(`neighbourhood group`)
# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
glimpse(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
# abnb$price<-gsub(","," ",as.character(abnb$price))
abnb
glimpse(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb
View(abnb)
abnb$price<-gsub("$"," ",as.character(abnb$price))
abnb
View(abnb)
abnb$price <- gsub("$"," ",as.character(abnb$price))
abnb
abnb$price <- gsub("$"," ",as.character(abnb$price))
abnb
View(abnb)
abnb
abnb$price <- gsub("$"," ",as.character(abnb$price))
abnb$price
abnb$price <- gsub("$","",as.character(abnb$price))
abnb$price
abnb$price <- gsub("$"," ",as.character(abnb$price))
abnb$price
library(tidyverse)
library(readr)
library(stringr)
abnb <- read_csv("Development/Projects/doTERRA Assessment/Airbnb_Open_Data.csv")
abnb <- as_tibble(abnb)
gsub("$", " ", as.character(abnb$price))
as.numeric(abnb$price)
abnb
abnb <- abnb %>%
select(NAME, `host id`, host_identity_verified, `neighbourhood group`,
neighbourhood, `room type`, `Construction year`, price, `service fee`)
abnb <- na.omit(abnb)
abnb
gsub("$", " ", as.character(abnb$price))
gsub("$", " ", abnb$price)
gsub("$", " ", as.numeric(abnb$price))
gsub("$", " ", abnb$price)
gsub(",", " ", abnb$price)
gsub(",", "", abnb$price)
abnb$price <- gsub(",", "", abnb$price)
abnb
gsub('$', '',abnb$price)
gsub("$"," ", abnb$price)
abnb
gsub("$", " ", abnb$price)
gsub('[^[:alnum:] ]','',abnb$price)
abnb$price <- gsub('[^[:alnum:] ]','',abnb$price)
abnb
as.numeric(abnb$price)
abnb$price <- as.numeric(abnb$price)
glimpse(abnb)
abnb$`service fee` <- gsub('[^[:alnum:] ]','',abnb$`service fee`)
abnb$`service fee` <- as.numeric(abnb$`service fee`)
glimpse(abnb)
library(tidyverse)
library(readr)
library(stringr)
abnb <- read_csv("Development/Projects/doTERRA Assessment/Airbnb_Open_Data.csv")
abnb <- as_tibble(abnb)
abnb <- abnb %>%
select(NAME, `host id`, host_identity_verified, `neighbourhood group`,
neighbourhood, `room type`, `Construction year`, price, `service fee`)
abnb <- na.omit(abnb)
table(abnb['room type'])
table(abnb['neighbourhood group'])
abnb %>%
count(`room type`)
abnb %>%
count(`neighbourhood group`)
# Omit the misspelled 'brookln' neighbourhood group
abnb <- abnb[abnb$`neighbourhood group` != 'brookln', ]
abnb %>%
count(`neighbourhood group`)
# Only view the verified host id's
abnb <- abnb %>%
filter(host_identity_verified == 'verified')
# Remove the $ and , from price and service fee, then convert to numeric
abnb$price <- gsub('[^[:alnum:] ]','',abnb$price)
abnb$price <- as.numeric(abnb$price)
abnb$`service fee` <- gsub('[^[:alnum:] ]','',abnb$`service fee`)
abnb$`service fee` <- as.numeric(abnb$`service fee`)
glimpse(abnb)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(avg_price = mean(price))
abnb %>%
count(`neighbourhood group`)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(avg_price = mean(price))
abnb %>%
group_by(`neighbourhood group`) %>%
aggregate(price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(pricex))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(price))
abnb
abnb %>%
filter(`neighbourhood group` == 'Bronx')
bronx <- abnb %>%
filter(`neighbourhood group` == 'Bronx')
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(round(price)))
mean(bronx$price)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price)),2)
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = round(mean(price),2))
abnb %>%
group_by(`neighbourhood group`) %>%
summarize(max_price = max(price),
mean_price = mean(price))
library(tidyverse)
library(rvest)
url <- https://www.espn.com/nba/player/stats/_/id/3908845/john-collins
url <- 'https://www.espn.com/nba/player/stats/_/id/3908845/john-collins'
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
pen_preds <- predict(preg_wf, new_data = test) %>% #This predicts log(count)
mutate(.pred=exp(.pred)) %>% # Back-transform the log to original scale
bind_cols(., test) %>% #Bind predictions with test data
select(datetime, .pred) %>% #Just keep datetime and predictions
rename(count=.pred) %>% #rename pred to count (for submission to Kaggle)
mutate(count=pmax(0, count)) %>% #pointwise max of (0, prediction)
mutate(datetime=as.character(format(datetime))) #needed for right format to Kaggle
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
colnames(predictions) <- c('datetime', 'count')
# Change formatting of datetime
predictions$datetime <- as.character(predictions$datetime)
# Write that dataset to a csv file
vroom_write(predictions, 'predictions.csv', ",")
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
## Bike Share Clean Code
library(tidyverse)
library(vroom)
library(patchwork)
library(tidymodels)
library(poissonreg)
bike <- vroom("./train.csv")
bike <- bike %>%
select(-casual, -registered)
install.packages('embed')
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed)
train <- vroom("./train.csv")
train <- vroom("./train.csv")
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
abnb <- abnb %>%
select(id, host_id, host_id, host_name, host_identity_verified, neighbourhood_group, neighbourhood, lat, long, room_type,
Construction_year, price) %>%
filter(host_identity_verified == 'verified')
# Transform the price column and convert Construction_year to factor
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric()) %>%
mutate(Construction_year = as.factor(Construction_year))
# Transform the price column
abnb <- abnb %>%
mutate(price = str_replace_all(price, "\\$", "") %>%    # Replace dollar signs
str_replace_all(",", "") %>%               # Replace commas
as.numeric())
# Count NA's in columns
na_count <- colSums(is.na(abnb))
abnb <- abnb %>%
drop_na(neighbourhood_group, neighbourhood, lat, long)
# Check to make sure that the NA's are removed from the groups that I wanted
sum(is.na(abnb$neighbourhood_group))
sum(is.na(abnb$neighbourhood))
sum(is.na(abnb$lat))
sum(is.na(abnb$long))
unique(abnb$neighbourhood_group)
# Change misspelled values in neighbourhood_group to make sure they match the real value
abnb <- abnb %>%
mutate(neighbourhood_group = case_when(
neighbourhood_group == "brookln" ~ "Brooklyn",
neighbourhood_group == "manhatan" ~ "Manhattan",
TRUE ~ neighbourhood_group # This makes sure that other values are unchanged
))
unique(abnb$neighbourhood_group)
vroom_write(abnb, ".\abnb.csv", delim = ",")
view(abnb)
library(readr)
Nascar_Loop_Data <- read_csv("Development/Projects/Nascar Loop Data.csv")
View(Nascar_Loop_Data)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
problems()
view(abnb)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets allowed"))
# Count listings that mention not allowing pets
no_pets <- sum(str_detect(abnb$house_rules, "no pets"))
cat("Number of listings that allow pets:", pets_allowed, "\n")
cat("Number of listings that do not allow pets:", no_pets, "\n")
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets"))
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Convert house_rules to lowercase
abnb$house_rules <- tolower(abnb$house_rules)
# Count listings that mention allowing pets
pets_allowed <- sum(str_detect(abnb$house_rules, "pets"))
pets_allowed
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Filter rows where 'house_rules' mentions 'pets'
pets <- abnb %>%
filter(str_detect(house_rules, "pet"))
# View the filtered data
head(pets)
view(pets)
library(tidyverse)
library(vroom)
library(readr)
library(stringr)
abnb <- read_csv("/Users/tylersmith/Development/Projects/doterra/Airbnb_Open_Data.csv")
# Replace spaces with underscores in column names
names(abnb) <- gsub(" ", "_", names(abnb))
# Filter rows where 'house_rules' mentions 'pets'
pets <- abnb %>%
filter(str_detect(house_rules, "no pets"))
# View the filtered data
head(pets)
# Filter rows where 'house_rules' mentions 'pets'
no_pets <- abnb %>%
filter(str_detect(house_rules, "no pets"))
view(no_pets)
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed) # for target encoding
library(ranger)
library(rpart)
library(discrim)
library(naivebayes)
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
setwd("~/Desktop/STAT348/Amazon-Employee-Access")
train <- vroom("./train.csv") %>%
mutate(ACTION = as.factor(ACTION))
test <- vroom("./test.csv") %>%
select(-1)
predict_and_format <- function(workflow, new_data, filename){
predictions <- workflow %>%
predict(new_data = new_data,
type = "prob")
submission <- predictions %>%
mutate(Id = row_number()) %>%
rename("Action" = ".pred_1") %>%
select(3,2)
vroom_write(x = submission, file = filename, delim=",")
}
target_encoding_recipe <- recipe(ACTION ~ ., data = train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
step_other(all_nominal_predictors(), threshold = .001) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) # dummy variable encoding
knn_model <- nearest_neighbor(neighbors=tune()) %>% # set or tune
set_mode("classification") %>%
set_engine("kknn")
knn_wf <- workflow() %>%
add_recipe(target_encoding_recipe) %>%
add_model(knn_model)
# cross validation
knn_tuning_grid <- grid_regular(neighbors(),
levels = 5)
knn_folds <- vfold_cv(train, v = 5, repeats = 1)
## Run the CV
CV_results <- knn_wf %>%
tune_grid(resamples = knn_folds,
grid = knn_tuning_grid,
metrics = metric_set(roc_auc))
install.packages('kknn')
library(kknn)
## Run the CV
CV_results <- knn_wf %>%
tune_grid(resamples = knn_folds,
grid = knn_tuning_grid,
metrics = metric_set(roc_auc))
library(tidyverse)
suspensions <- read_csv('/Users/tylersmith/Development/Projects/nfl-suspensions-data.csv')
all_years <- seq(min(suspensions$year, na.rm = TRUE), max(suspensions$year, na.rm = TRUE), by=1)
missing_years <- setdiff(all_years, unique(suspensions$year))
all_years
missing_years
# Creating a template for missing years
missing_data <- tibble(
name = NA_character_,
team = NA_character_,
games = 0,
category = "No Suspensions",
desc. = "No Suspensions",
year = missing_years,
source = NA_character_
)
suspensions$games <- as.numeric(suspensions$games)
na_rows <- suspensions[is.na(suspensions$games),]
# Combining the original dataset with the missing data
updated_data <- bind_rows(suspensions, missing_data)
write.csv(updated_data, "./scaffold.csv", row.names = FALSE)
# All unique years and categories
all_years <- unique(updated_data$year)
all_categories <- c("PEDs", "Substance abuse", "Personal conduct", "In-game violence")
# Generate all possible combinations of years and categories
all_combinations <- expand.grid(year = all_years, category = all_categories)
# Left join with updated_data
full_data <- merge(all_combinations, updated_data, by = c("year", "category"), all.x = TRUE)
# Replace NA values in games with 0
full_data$games[is.na(full_data$games)] <- 0
write.csv(full_data, "./last_chance.csv", row.names = FALSE)
library(dplyr)
print(suspension_counts)
suspension_counts <- full_data %>%
group_by(year, category) %>%
summarise(count = n()) %>%
arrange(year, category)
print(suspension_counts)
view(suspension_counts)
twenty_twelve <- full_data %>%
filter(year == 2012)
view(twenty_twelve)
twenty_twelve <- full_data %>%
filter(year == 2012) %>%
filter(category = 'PEDs')
twenty_twelve <- full_data %>%
filter(year == 2012) %>%
filter(category = 'PED')
twenty_twelve <- full_data %>%
filter(year == 2012)
view(twenty_twelve)
twenty_twelve <- full_data %>%
filter(year == 2012 & category == 'PEDs')
view(twenty_twelve)
average_games <- twenty_twelve %>%
summarise(average_suspension = mean(games, na.rm = TRUE))
print(average_games)
